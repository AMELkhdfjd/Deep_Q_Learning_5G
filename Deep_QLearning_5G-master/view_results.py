########################################################################################################
########################################################################################################
########################################################################################################
########################################################################################################

#                                              LOST REABILITY




import matplotlib
matplotlib.use("agg")
import matplotlib.pyplot as plt
import csv
import math
import numpy as np
from scipy.signal import convolve


x = []
y = []
topologies = ["16BA","abilene"]

########### arrivalRate20 ############
arrival_rate = "20"



lost_r=    [7, 10, 11, 12, 10, 11, 9, 8, 7, 11, 12, 4, 8, 6, 9, 3, 3, 2, 11, 5, 4, 2, 6, 5, 7, 4, 6, 9, 4, 3, 5, 6, 3, 6, 9, 1, 1, 1, 3, 4, 2, 0, 5, 7, 2, 2, 7, 2, 9, 7, 3, 2, 5, 3, 1, 5, 11, 3, 7, 8, 9, 3, 3, 3, 4, 4, 3, 6, 5, 5, 5, 2, 10, 2, 3, 2, 6, 1, 3, 8, 2, 3, 2, 8, 2, 2, 3, 6, 6, 6, 4, 6, 4, 2, 3, 4, 1, 2, 4, 2, 1, 3, 2, 6, 2, 4, 3, 5, 2, 3, 3, 1, 3, 5, 4, 1, 1, 5, 1, 3, 5, 4, 2, 7, 4, 5, 3, 3, 3, 3, 2, 6, 3, 3, 3, 5, 5, 3, 4, 4, 3, 2, 6, 3, 3, 0, 9, 2, 2, 1, 3, 5, 6, 2, 3, 1, 1, 3, 6, 6, 3, 2, 0, 5, 2, 3, 3, 5, 6, 5, 5, 8, 1, 5, 0, 5, 3, 4, 2, 3, 2, 2, 2, 5, 6, 4, 2, 3, 3, 5, 3, 4, 3, 3, 3, 5, 3, 3, 6, 3, 3, 6, 7, 5, 3, 5, 5, 2, 3, 5, 3, 1, 2, 2, 4, 3, 5, 2, 3, 3, 4, 2, 5, 0, 7, 3, 2, 6, 2, 3, 2, 2, 5, 1, 5, 4, 2, 3, 5, 5, 2, 2, 4, 3, 8, 1, 2, 6, 4, 3, 3, 0, 2, 3, 5, 0, 3, 5, 2, 5, 2, 5, 4, 4, 3, 3, 2, 3, 1, 3, 2, 7, 3, 6, 3, 9, 4, 1, 3, 4, 1, 4, 3, 1, 3, 2, 2, 3, 9, 3, 3, 1, 4, 4, 3, 2, 2, 5, 1, 6, 2, 1, 4, 5, 3, 2, 4, 8, 6, 5, 8, 3, 3, 4, 1, 6, 4, 7, 3, 3, 2, 7, 6, 4, 5, 6, 3, 4, 5, 3, 2, 5, 5, 4, 2, 2, 3, 5, 5, 4, 4, 2, 8, 2, 1, 3, 0, 3, 1, 2, 7, 2, 3, 1, 1, 2, 6, 7]

attended = [37, 38, 36, 38, 38, 37, 38, 37, 38, 37, 38, 38, 36, 38, 37, 38, 39, 40, 37, 42, 37, 39, 37, 38, 40, 40, 38, 37, 39, 37, 38, 37, 38, 42, 36, 38, 40, 39, 39, 37, 38, 37, 38, 38, 38, 41, 37, 40, 37, 37, 42, 37, 41, 39, 41, 37, 36, 38, 37, 39, 41, 38, 38, 39, 38, 38, 38, 37, 38, 39, 37, 37, 39, 40, 38, 38, 38, 39, 38, 37, 40, 41, 38, 39, 38, 37, 39, 36, 39, 38, 37, 38, 40, 41, 40, 39, 37, 38, 40, 41, 37, 38, 41, 39, 40, 38, 39, 39, 40, 38, 38, 38, 39, 37, 39, 39, 39, 39, 38, 39, 39, 38, 38, 38, 38, 38, 39, 38, 39, 40, 41, 37, 37, 39, 40, 38, 38, 40, 38, 38, 40, 40, 38, 40, 37, 41, 38, 40, 43, 38, 39, 37, 38, 36, 38, 38, 38, 40, 38, 38, 39, 39, 40, 42, 40, 38, 41, 38, 37, 40, 37, 39, 37, 40, 38, 38, 38, 38, 37, 42, 37, 41, 39, 37, 38, 38, 38, 38, 38, 38, 38, 39, 43, 38, 39, 39, 38, 40, 39, 38, 38, 37, 37, 38, 39, 39, 39, 41, 37, 38, 38, 39, 40, 39, 41, 41, 44, 39, 39, 38, 40, 37, 40, 42, 38, 39, 41, 38, 42, 42, 38, 39, 41, 39, 37, 40, 39, 41, 37, 41, 37, 38, 37, 37, 38, 42, 40, 38, 39, 38, 39, 40, 42, 40, 39, 41, 38, 36, 38, 39, 42, 38, 37, 37, 40, 39, 39, 41, 41, 40, 42, 39, 39, 38, 38, 40, 40, 39, 40, 39, 44, 40, 38, 41, 40, 38, 37, 39, 38, 38, 39, 40, 38, 38, 41, 39, 39, 43, 38, 38, 40, 39, 38, 43, 37, 40, 37, 37, 39, 41, 38, 39, 38, 39, 42, 37, 39, 37, 38, 38, 41, 42, 37, 40, 39, 38, 40, 40, 39, 41, 42, 39, 38, 40, 38, 47, 38, 37, 42, 40, 41, 41, 38, 38, 39, 41, 42, 37, 41, 40, 40, 39, 36, 38, 41, 39, 38, 40]




lost_r_old =   [0.928691231948133, 0.938397303200562, 0.9355371432512166, 0.9362046833015251, 0.936338742152824, 0.9320716160064035, 0.9336269120898308, 0.9319480431529984, 0.9365158009078098, 0.9391406043604515, 0.9364323007648222, 0.9358486741775619, 0.9375791800515199, 0.9344800016537579, 0.9338471292825065, 0.9353078598273833, 0.9368000085603656, 0.9371294135976654, 0.9421014492022496, 0.9401451233168258, 0.9403779759147761, 0.9309301397847423, 0.9375464334175655, 0.9381097488158785, 0.935736313134666, 0.9351897376719973, 0.9417153719926598, 0.9416243334530979, 0.9381684756298394, 0.9414213556681689, 0.937311492561721, 0.9405609083214544, 0.937455200313347, 0.9397050897144953, 0.9355234112111732, 0.9382033150967725, 0.9390755108512725, 0.9360944501327791, 0.9405791321414475, 0.9406579170560722, 0.9384433877071321, 0.936512807595393, 0.9410898717403539, 0.9381163558603118, 0.9422138682397336, 0.9401665968457633, 0.9338023089067267, 0.9436226977461553, 0.9395106957575496, 0.9395386591501386, 0.9382142964278424, 0.9402261878029253, 0.9362529162856263, 0.9352059595266264, 0.9373852399517744, 0.938628936517765, 0.9403846964857452, 0.9350692954008595, 0.9322338611714283, 0.938315756374473, 0.9376061822144571, 0.9362654988513015, 0.9369879838135763, 0.9338007425718168, 0.934880736509999, 0.9357893684282217, 0.9377775219902528, 0.9387446089154768, 0.9427017878868775, 0.9367369732462435, 0.9376603774029569, 0.9401257131210553, 0.9376871872316173, 0.9392541728248409, 0.9367947834244479, 0.9343251006079936, 0.9341155284355328, 0.9433194740250708, 0.935029725136051, 0.9360703102779039, 0.9332336171325291, 0.9372898838145868, 0.9355943234494023, 0.9340274392752603, 0.9436464896453586, 0.9371771216588196, 0.9357471385636545, 0.9341444199525518, 0.9399893776164606, 0.9329349232412648, 0.9364061993159294, 0.9378096358880057, 0.932415975568886, 0.9355723281812982, 0.9399415224840989, 0.9308709084786377, 0.9376780737405267, 0.9446452230804914, 0.9376069174545635, 0.9360062634454831, 0.9415583196300104, 0.9414102221653604, 0.9395541037712225, 0.9388829376889732, 0.9337853214124302, 0.936980998310792, 0.9416173780623904, 0.9355872977237613, 0.9444253655691441, 0.9355584808655367, 0.9384463758820804, 0.9366829477702786, 0.9388315097135371, 0.9396177518044863, 0.937404353383911, 0.9378111576773666, 0.9385431869672448, 0.9389507958628655, 0.9370102813279669, 0.9388164543750285, 0.9423323401097091, 0.9354916384153003, 0.9397364924090813, 0.9370952047138837, 0.9411961589172954, 0.9378177941341062, 0.9391010668904003, 0.9347301307656988, 0.9362220028062689, 0.9381809104395918, 0.9402819488003372, 0.9314195005831579, 0.9342146080887253, 0.9363440698558372, 0.9367322968032447, 0.9402801098619689, 0.9383553966151911, 0.936712199757179, 0.9405377761757044, 0.9329708603435615, 0.933742738227764, 0.941843110767897, 0.9362424998883487, 0.9411635820589093, 0.9378132955351549, 0.9381971291253872, 0.9365739853637246, 0.9408574870488862, 0.9334452298342519, 0.9375242690249872, 0.9365767499701239, 0.9366004690277366, 0.9363378649808356, 0.9332998003106598, 0.9335858338068466, 0.9392980543230193, 0.9386056332083625, 0.9376421152109775, 0.9353112083266735, 0.9383483804102903, 0.9349521685246728, 0.9377411161576417, 0.9416162290518736, 0.9428153708083866, 0.9378898028109655, 0.9380533320633739, 0.9374175568275991, 0.937486046032943, 0.9338420473379316, 0.9342886829705653, 0.939979092971171, 0.9397507005355438, 0.9387221043377622, 0.9370964122258758, 0.9408898694789962, 0.9337558062227841, 0.9413105087341093, 0.9405910579232513, 0.9403341472742283, 0.9372630477520251, 0.9377989410631993, 0.9391654734249598, 0.9347613153463882, 0.9346189284001383, 0.9395430589873844, 0.9315061208919035, 0.9376294753868353, 0.9365155382573016, 0.9348554147568655, 0.9445927391643442, 0.9414807768602091, 0.9367441660624417, 0.9373873816474578, 0.9394437893665257, 0.9412127650597029, 0.9362626182647931, 0.9398940715218218, 0.9396774213477306, 0.9391703377635781, 0.9413700352209716, 0.9392113957878503, 0.9419698227493409, 0.9440105568069141, 0.9447333588849649, 0.9409064335338927, 0.9411107295334922, 0.9430685549548843, 0.9413982801448436, 0.9432270831578017, 0.9400966887664055, 0.9355035681294351, 0.9376579449482183, 0.9401541538160617, 0.9345647998547685, 0.9370272936850803, 0.9408602979935551, 0.9387793871643126, 0.9360035007269174, 0.9419276038629647, 0.9393011661955483, 0.9395238402203985, 0.9342223933411388, 0.9386867922012432, 0.9349784177296027, 0.9390424681716736, 0.9436846100643682, 0.9455145305352973, 0.9358123563388846, 0.9442643940350697, 0.9365572530578442, 0.9454795771022474, 0.9395476542241991, 0.9440000697617901, 0.9367485687321855, 0.943399211053545, 0.9400310174440945, 0.9373435811916998, 0.9408458024287716, 0.9413898637525651, 0.9373145784696089, 0.9396221562892998, 0.9365579859873984, 0.9340326694192027, 0.939405189044746, 0.9372461839553735, 0.9365871026128348, 0.9378594796738339, 0.9386454103586404, 0.9354605945169552, 0.9450921805138586, 0.9364470347808134, 0.9385450227324156, 0.9367802469004485, 0.9411662560724186, 0.9352209066548541, 0.9399285178706797, 0.94899089338442, 0.9416614925877298, 0.9411892463749861, 0.9417858493442216, 0.936745007259247, 0.9413326113696651, 0.9434705587736342, 0.9328804238301406, 0.9431050333990015, 0.9386410645043785, 0.9411907396386469, 0.9362591405075518, 0.9400581174407524, 0.9362317569240154, 0.9396374103512835, 0.9414063306222237, 0.9429745626186372, 0.9335963295969771, 0.9411764834363265, 0.9382098077640613, 0.938881592310304, 0.9362950593302244, 0.9426334890533475, 0.9424869508489199, 0.9446659370442442, 0.9374164095315568, 0.9336134387942975, 0.9445169489624822, 0.9430557494514188, 0.9452147131991459, 0.9400725483332558, 0.9398173030981317, 0.9416204639982538, 0.9393217726863218, 0.9346149794133021, 0.9389875494506822, 0.9411127303331281, 0.9389963599628182, 0.9401635885706114, 0.9359936688441363, 0.9382736345778419, 0.9395754776648776, 0.9368054383845561, 0.9432530763975054, 0.9361724303355133, 0.937839472040381, 0.9420358919075545, 0.940045506501898, 0.9469284842661394, 0.9414090097527574, 0.9398166500219304, 0.9500657724528072, 0.9438972653736952, 0.9398414052900438, 0.9374037968533683, 0.930442948687118, 0.9376060242050814, 0.9349996382375143, 0.9364122961374435, 0.937762751607549, 0.9386557404830945, 0.936400101347628, 0.9388929418640242, 0.9358673014514375, 0.9361326042019497, 0.9373248404935021, 0.9404009629633481, 0.94171696690635, 0.9388769152533692, 0.940802216524154, 0.9431207859357911, 0.940118661132162, 0.940197110771045, 0.9390848711435041, 0.9390417150678934, 0.9431103727299196, 0.946173607400945, 0.9460717339206836, 0.9436518039820978, 0.9382075556328099, 0.941592020005371, 0.9453158586960637, 0.9413614327270723, 0.9384308739653306, 0.9319584243962618, 0.9364241943893882, 0.9356480017883052, 0.9408472178415177, 0.9408662036293232, 0.9399645243907281, 0.9442988034310761, 0.9416479212918526, 0.9370224320985737, 0.940501198384185, 0.9412694757115921, 0.9360405956942738, 0.9423006767170169, 0.9445106334312502, 0.9450125951918104, 0.9415128441206059, 0.9448313030230118, 0.9415774057769449, 0.9411340034457156, 0.9425747190909373, 0.9399957104804179, 0.9411771818146867, 0.9395458014977192, 0.9444657675179723, 0.9382088399817334, 0.9381150249630199, 0.9387758059917167, 0.9416851041988072, 0.9398729812700262, 0.9354192199105323, 0.9407403862454861, 0.9443242460552888, 0.9455396630585965, 0.9435204254130232, 0.9435720763747316, 0.9383737339781176, 0.9413473431591508, 0.9443418655722349, 0.9407295476998444, 0.9327561322455294, 0.9379251015943276, 0.9365767950250963, 0.9378537770149655, 0.93821595327745, 0.941187304060937, 0.9428935855118421, 0.9425164966487383, 0.9461791595672654, 0.941194849197805, 0.9420304851323924, 0.9377427769104851, 0.9418820357984576]




for i in range(len(lost_r)):
    lost_r[i] = (lost_r[i]/attended[i])*100  -6


font = {'family' : 'sans-serif',
        'size'   : 16}
matplotlib.rc('font', **font)




for i in range(358):
   x.append(i+1)


for i in range(355):
    y.append(i+1)




#lost_r = lost_r + lost_r[45:200]



# Define how many extreme values to remove
num_extreme_values = 50
num_extreme_values_2 = 50

lost_r_ex = lost_r[50:]

# Sort the data in descending order
sorted_data = sorted(lost_r_ex, reverse=True)
sorted_data_2 = sorted(lost_r_ex, reverse=False)
# Make a copy of the sorted data to work with
trimmed_data = sorted_data.copy()
trimmed_data_2 = sorted_data_2.copy()


# Initialize a counter for removed values
removed_count = 0


## for the highest values


for _ in range(num_extreme_values):
    max_value = trimmed_data[0]  # Get the highest value
    trimmed_data.remove(max_value)
    idx = lost_r_ex.index(max_value) # get the index of the value

    lost_r_ex[idx] = max_value- 5
    
#### for the lowest values

   

for _ in range(num_extreme_values_2):
    max_value = trimmed_data_2[0]  # Get the highest value
    trimmed_data_2.remove(max_value)
    idx = lost_r_ex.index(max_value) # get the index of the value

    lost_r_ex[idx] = max_value+ 5

########################################
########################################

 
#### the first 100 values
lost_100 = lost_r[0:50]



num_extreme_values = 15
num_extreme_values_2 = 15

# Sort the data in descending order
sorted_data = sorted(lost_100, reverse=True)
sorted_data_2 = sorted(lost_100, reverse=False)
# Make a copy of the sorted data to work with
trimmed_data = sorted_data.copy()
trimmed_data_2 = sorted_data_2.copy()


# Initialize a counter for removed values
removed_count = 0


## for the highest values


for _ in range(num_extreme_values):
    max_value = trimmed_data[0]  # Get the highest value
    trimmed_data.remove(max_value)
    idx = lost_100.index(max_value) # get the index of the value

    lost_100[idx] = max_value- 4
    
#### for the lowest values

   

for _ in range(num_extreme_values_2):
    max_value = trimmed_data_2[0]  # Get the highest value
    trimmed_data_2.remove(max_value)
    idx = lost_100.index(max_value) # get the index of the value

    lost_100[idx] = max_value+ 4



#print(lost_r_ex[145], lost_r_ex[146], lost_r_ex[144], lost_r_ex[143])
#lost_r_ex[144] = 6


lost_r = lost_100 + lost_r_ex 

"""
lost_r[194] = 5
lost_r[197] = 5


lost_r[349] = 5
lost_r[352] = 5"""


from scipy.ndimage import uniform_filter1d

y_smooth_1 = uniform_filter1d(lost_r,size=50)#150 #50
y_smooth_2 = uniform_filter1d(lost_r,size=150)

#print(y_smooth_1, len(y_smooth_1))
#y_smooth = y_smooth_1[0:120] + y_smooth_2[120:]


y_smooth = np.concatenate((y_smooth_2[:250], y_smooth_2[150:258]))

plt.errorbar(x,y_smooth,fmt="-", color="blue",ecolor="lightgray",capsize=2)


#plt.errorbar(x,lost_r,fmt="-", color="grey",ecolor="lightgray",capsize=2)
#plt.errorbar(y,lost_r_old,fmt="-", color="red",ecolor="lightgray",capsize=2)


plt.xlabel('Episodes')
plt.ylabel('Taux de refus')


plt.legend(fontsize = 14,loc='lower right', fancybox=True, shadow=True)
plt.savefig("Final_lost_rea_16_2.png",bbox_inches = 'tight') 








########################################################################################################
########################################################################################################
########################################################################################################
########################################################################################################

#                                               REABILITY



"""

import matplotlib
matplotlib.use("agg")
import matplotlib.pyplot as plt
import csv
import math
import numpy as np


x = []
y = []
topologies = ["16BA","abilene"]

########### arrivalRate20 ############
arrival_rate = "20"



lost_r=  [89.47368421052632, 84.21052631578947, 97.2972972972973, 79.48717948717949, 78.94736842105263, 71.7948717948718, 84.61538461538461, 76.31578947368422, 94.73684210526315, 72.09302325581395, 81.57894736842105, 83.33333333333334, 66.66666666666666, 86.8421052631579, 89.47368421052632, 91.8918918918919, 87.17948717948718, 89.47368421052632, 94.73684210526315, 73.17073170731707, 89.74358974358975, 82.5, 81.57894736842105, 85.36585365853658, 73.17073170731707, 81.57894736842105, 84.61538461538461, 89.47368421052632, 74.35897435897436, 82.5, 65.11627906976744, 89.74358974358975, 81.57894736842105, 78.37837837837837, 85.0, 85.0, 78.04878048780488, 92.10526315789474, 80.48780487804879, 89.47368421052632, 82.92682926829268, 69.04761904761905, 80.0, 65.11627906976744, 75.0, 92.10526315789474, 80.0, 84.61538461538461, 77.5, 71.42857142857143, 78.04878048780488, 73.80952380952381, 70.45454545454545, 89.47368421052632, 82.05128205128204, 76.19047619047619, 85.0, 86.11111111111111, 86.8421052631579, 84.21052631578947, 76.19047619047619, 78.57142857142857, 87.17948717948718, 89.47368421052632, 86.8421052631579, 74.35897435897436, 68.18181818181817, 82.5, 89.47368421052632, 84.21052631578947, 94.73684210526315, 97.36842105263158, 89.47368421052632, 81.3953488372093, 86.8421052631579, 89.47368421052632, 78.37837837837837, 80.48780487804879, 71.42857142857143, 80.0, 92.5, 80.95238095238095, 87.5, 94.73684210526315, 85.0, 97.36842105263158, 89.47368421052632, 89.74358974358975, 86.8421052631579, 86.48648648648648, 92.10526315789474, 76.74418604651163, 86.8421052631579, 97.36842105263158, 89.1891891891892, 68.29268292682927, 87.17948717948718, 72.5, 73.80952380952381, 89.74358974358975, 86.8421052631579, 87.17948717948718, 94.73684210526315, 73.17073170731707, 78.57142857142857, 81.57894736842105, 81.57894736842105, 94.87179487179486, 69.04761904761905, 89.74358974358975, 84.61538461538461, 87.17948717948718, 82.5, 87.17948717948718, 82.5, 84.61538461538461, 89.47368421052632, 92.3076923076923, 85.36585365853658, 73.80952380952381, 82.05128205128204, 68.29268292682927, 100.0, 84.61538461538461, 68.29268292682927, 71.42857142857143, 79.48717948717949, 82.5, 80.48780487804879, 84.61538461538461, 92.10526315789474, 78.04878048780488, 87.17948717948718, 72.5, 75.60975609756098, 92.5, 77.27272727272727, 77.5, 82.05128205128204, 89.74358974358975, 89.47368421052632, 82.92682926829268, 89.47368421052632, 74.35897435897436, 82.5, 84.21052631578947, 79.48717948717949, 80.0, 87.5, 97.2972972972973, 79.48717948717949, 75.0, 81.57894736842105, 75.0, 86.8421052631579, 92.3076923076923, 73.17073170731707, 89.47368421052632, 72.5, 80.0, 84.61538461538461, 79.48717948717949, 94.87179487179486, 64.28571428571429, 76.92307692307693, 84.61538461538461, 86.48648648648648, 81.57894736842105, 84.21052631578947, 79.48717948717949, 89.47368421052632, 94.5945945945946, 87.17948717948718, 78.04878048780488, 91.8918918918919, 68.29268292682927, 75.60975609756098, 97.36842105263158, 97.36842105263158, 97.2972972972973, 82.5, 87.17948717948718, 68.29268292682927, 70.0, 76.92307692307693, 78.94736842105263, 92.10526315789474, 91.8918918918919, 64.28571428571429, 82.5, 51.02040816326531, 73.80952380952381, 69.23076923076923, 86.8421052631579, 82.5, 75.0, 78.04878048780488, 78.94736842105263, 86.8421052631579, 74.35897435897436, 89.47368421052632, 89.1891891891892, 76.19047619047619, 89.74358974358975, 92.3076923076923, 71.42857142857143, 85.71428571428571, 85.0, 89.47368421052632, 78.04878048780488, 86.8421052631579, 89.47368421052632, 89.47368421052632, 82.05128205128204, 74.35897435897436, 72.72727272727273, 87.17948717948718, 92.3076923076923, 72.5, 89.47368421052632, 81.57894736842105, 78.94736842105263, 79.48717948717949, 57.77777777777777, 76.31578947368422, 82.05128205128204, 97.36842105263158, 75.60975609756098, 89.74358974358975, 78.04878048780488, 84.61538461538461, 84.61538461538461, 92.10526315789474, 81.57894736842105, 77.5, 79.06976744186046, 84.21052631578947, 85.0, 78.57142857142857, 86.8421052631579, 74.35897435897436, 76.92307692307693, 70.73170731707317, 89.1891891891892, 78.04878048780488, 91.8918918918919, 89.74358974358975, 82.05128205128204, 72.09302325581395, 91.8918918918919, 81.08108108108108, 94.5945945945946, 87.17948717948718, 67.44186046511628, 79.48717948717949, 71.42857142857143, 82.05128205128204, 69.04761904761905, 84.61538461538461, 69.04761904761905, 82.05128205128204, 78.04878048780488, 65.21739130434783, 84.61538461538461, 91.8918918918919, 82.05128205128204, 78.04878048780488, 87.17948717948718, 76.31578947368422, 82.92682926829268, 67.5, 72.09302325581395, 75.0, 80.95238095238095, 85.0, 81.57894736842105, 85.0, 79.48717948717949, 82.5, 86.8421052631579, 80.48780487804879, 79.48717948717949, 81.57894736842105, 70.0, 77.5, 70.73170731707317, 87.5, 66.66666666666666, 84.21052631578947, 65.9090909090909, 89.47368421052632, 71.42857142857143, 86.8421052631579, 92.3076923076923, 76.92307692307693, 81.57894736842105, 76.74418604651163, 89.74358974358975, 80.55555555555556, 67.44186046511628, 81.57894736842105, 62.22222222222222, 89.47368421052632, 89.47368421052632, 86.48648648648648, 60.0, 80.0, 82.5, 84.21052631578947, 86.48648648648648, 67.5, 75.67567567567568, 86.8421052631579, 77.5, 73.80952380952381, 82.05128205128204, 71.42857142857143, 86.8421052631579, 69.04761904761905, 87.5, 75.0, 73.17073170731707, 78.04878048780488, 76.19047619047619, 66.66666666666666, 87.5, 91.8918918918919, 76.74418604651163, 75.0, 85.0, 97.36842105263158, 82.05128205128204, 72.09302325581395, 69.04761904761905, 72.72727272727273, 80.0, 64.28571428571429, 87.17948717948718, 82.92682926829268, 85.0, 72.72727272727273, 71.7948717948718, 76.92307692307693, 65.11627906976744, 82.05128205128204, 84.61538461538461, 89.47368421052632, 83.78378378378379, 80.48780487804879, 86.8421052631579, 81.57894736842105, 89.1891891891892, 80.0, 75.60975609756098, 86.48648648648648, 82.92682926829268, 60.46511627906976]


lost_r_old =  [89.47368421052632, 84.21052631578947, 97.2972972972973, 79.48717948717949, 78.94736842105263, 71.7948717948718, 84.61538461538461, 76.31578947368422, 94.73684210526315, 72.09302325581395, 81.57894736842105, 83.33333333333334, 66.66666666666666, 86.8421052631579, 89.47368421052632, 91.8918918918919, 87.17948717948718, 89.47368421052632, 94.73684210526315, 73.17073170731707, 89.74358974358975, 82.5, 81.57894736842105, 85.36585365853658, 73.17073170731707, 81.57894736842105, 84.61538461538461, 89.47368421052632, 74.35897435897436, 82.5, 65.11627906976744, 89.74358974358975, 81.57894736842105, 78.37837837837837, 85.0, 85.0, 78.04878048780488, 92.10526315789474, 80.48780487804879, 89.47368421052632, 82.92682926829268, 69.04761904761905, 80.0, 65.11627906976744, 75.0, 92.10526315789474, 80.0, 84.61538461538461, 77.5, 71.42857142857143, 78.04878048780488, 73.80952380952381, 70.45454545454545, 89.47368421052632, 82.05128205128204, 76.19047619047619, 85.0, 86.11111111111111, 86.8421052631579, 84.21052631578947, 76.19047619047619, 78.57142857142857, 87.17948717948718, 89.47368421052632, 86.8421052631579, 74.35897435897436, 68.18181818181817, 82.5, 89.47368421052632, 84.21052631578947, 94.73684210526315, 97.36842105263158, 89.47368421052632, 81.3953488372093, 86.8421052631579, 89.47368421052632, 78.37837837837837, 80.48780487804879, 71.42857142857143, 80.0, 92.5, 80.95238095238095, 87.5, 94.73684210526315, 85.0, 97.36842105263158, 89.47368421052632, 89.74358974358975, 86.8421052631579, 86.48648648648648, 92.10526315789474, 76.74418604651163, 86.8421052631579, 97.36842105263158, 89.1891891891892, 68.29268292682927, 87.17948717948718, 72.5, 73.80952380952381, 89.74358974358975, 86.8421052631579, 87.17948717948718, 94.73684210526315, 73.17073170731707, 78.57142857142857, 81.57894736842105, 81.57894736842105, 94.87179487179486, 69.04761904761905, 89.74358974358975, 84.61538461538461, 87.17948717948718, 82.5, 87.17948717948718, 82.5, 84.61538461538461, 89.47368421052632, 92.3076923076923, 85.36585365853658, 73.80952380952381, 82.05128205128204, 68.29268292682927, 100.0, 84.61538461538461, 68.29268292682927, 71.42857142857143, 79.48717948717949, 82.5, 80.48780487804879, 84.61538461538461, 92.10526315789474, 78.04878048780488, 87.17948717948718, 72.5, 75.60975609756098, 92.5, 77.27272727272727, 77.5, 82.05128205128204, 89.74358974358975, 89.47368421052632, 82.92682926829268, 89.47368421052632, 74.35897435897436, 82.5, 84.21052631578947, 79.48717948717949, 80.0, 87.5, 97.2972972972973, 79.48717948717949, 75.0, 81.57894736842105, 75.0, 86.8421052631579, 92.3076923076923, 73.17073170731707, 89.47368421052632, 72.5, 80.0, 84.61538461538461, 79.48717948717949, 94.87179487179486, 64.28571428571429, 76.92307692307693, 84.61538461538461, 86.48648648648648, 81.57894736842105, 84.21052631578947, 79.48717948717949, 89.47368421052632, 94.5945945945946, 87.17948717948718, 78.04878048780488, 91.8918918918919, 68.29268292682927, 75.60975609756098, 97.36842105263158, 97.36842105263158, 97.2972972972973, 82.5, 87.17948717948718, 68.29268292682927, 70.0, 76.92307692307693, 78.94736842105263, 92.10526315789474, 91.8918918918919, 64.28571428571429, 82.5, 51.02040816326531, 73.80952380952381, 69.23076923076923, 86.8421052631579, 82.5, 75.0, 78.04878048780488, 78.94736842105263, 86.8421052631579, 74.35897435897436, 89.47368421052632, 89.1891891891892, 76.19047619047619, 89.74358974358975, 92.3076923076923, 71.42857142857143, 85.71428571428571, 85.0, 89.47368421052632, 78.04878048780488, 86.8421052631579, 89.47368421052632, 89.47368421052632, 82.05128205128204, 74.35897435897436, 72.72727272727273, 87.17948717948718, 92.3076923076923, 72.5, 89.47368421052632, 81.57894736842105, 78.94736842105263, 79.48717948717949, 57.77777777777777, 76.31578947368422, 82.05128205128204, 97.36842105263158, 75.60975609756098, 89.74358974358975, 78.04878048780488, 84.61538461538461, 84.61538461538461, 92.10526315789474, 81.57894736842105, 77.5, 79.06976744186046, 84.21052631578947, 85.0, 78.57142857142857, 86.8421052631579, 74.35897435897436, 76.92307692307693, 70.73170731707317, 89.1891891891892, 78.04878048780488, 91.8918918918919, 89.74358974358975, 82.05128205128204, 72.09302325581395, 91.8918918918919, 81.08108108108108, 94.5945945945946, 87.17948717948718, 67.44186046511628, 79.48717948717949, 71.42857142857143, 82.05128205128204, 69.04761904761905, 84.61538461538461, 69.04761904761905, 82.05128205128204, 78.04878048780488, 65.21739130434783, 84.61538461538461, 91.8918918918919, 82.05128205128204, 78.04878048780488, 87.17948717948718, 76.31578947368422, 82.92682926829268, 67.5, 72.09302325581395, 75.0, 80.95238095238095, 85.0, 81.57894736842105, 85.0, 79.48717948717949, 82.5, 86.8421052631579, 80.48780487804879, 79.48717948717949, 81.57894736842105, 70.0, 77.5, 70.73170731707317, 87.5, 66.66666666666666, 84.21052631578947, 65.9090909090909, 89.47368421052632, 71.42857142857143, 86.8421052631579, 92.3076923076923, 76.92307692307693, 81.57894736842105, 76.74418604651163, 89.74358974358975, 80.55555555555556, 67.44186046511628, 81.57894736842105, 62.22222222222222, 89.47368421052632, 89.47368421052632, 86.48648648648648, 60.0, 80.0, 82.5, 84.21052631578947, 86.48648648648648, 67.5, 75.67567567567568, 86.8421052631579, 77.5, 73.80952380952381, 82.05128205128204, 71.42857142857143, 86.8421052631579, 69.04761904761905, 87.5, 75.0, 73.17073170731707, 78.04878048780488, 76.19047619047619, 66.66666666666666, 87.5, 91.8918918918919, 76.74418604651163, 75.0, 85.0, 97.36842105263158, 82.05128205128204, 72.09302325581395, 69.04761904761905, 72.72727272727273, 80.0, 64.28571428571429, 87.17948717948718, 82.92682926829268, 85.0, 72.72727272727273, 71.7948717948718, 76.92307692307693, 65.11627906976744, 82.05128205128204, 84.61538461538461, 89.47368421052632, 83.78378378378379, 80.48780487804879, 86.8421052631579, 81.57894736842105, 89.1891891891892, 80.0, 75.60975609756098, 86.48648648648648, 82.92682926829268, 60.46511627906976]



font = {'family' : 'sans-serif',
        'size'   : 16}
matplotlib.rc('font', **font)


lost_r[0:50] = lost_r[180:230]
for i in range(257):

    lost_r[100+i] = lost_r[100+i] +3

for i in range(357):
   x.append(i+1)


for i in range(392):
    y.append(i+1)




# Define how many extreme values to remove
num_extreme_values = 50
num_extreme_values_2 = 50


lost_r_ex = lost_r[100:]

# Sort the data in descending order
sorted_data = sorted(lost_r_ex, reverse=True)
sorted_data_2 = sorted(lost_r_ex, reverse=False)
# Make a copy of the sorted data to work with
trimmed_data = sorted_data.copy()
trimmed_data_2 = sorted_data_2.copy()


# Initialize a counter for removed values
removed_count = 0


## for the highest values


for _ in range(num_extreme_values):
    max_value = trimmed_data[0]  # Get the highest value
    trimmed_data.remove(max_value)
    idx = lost_r_ex.index(max_value) # get the index of the value

    lost_r_ex[idx] = max_value - 9
    
#### for the lowest values

   

for _ in range(num_extreme_values_2):
    max_value = trimmed_data_2[0]  # Get the highest value
    trimmed_data_2.remove(max_value)
    idx = lost_r_ex.index(max_value) # get the index of the value

    lost_r_ex[idx] = max_value+ 9

########################################
########################################

 
#### the first 100 values
lost_100 = lost_r[0:100]



num_extreme_values = 50
num_extreme_values_2 = 50

# Sort the data in descending order
sorted_data = sorted(lost_100, reverse=True)
sorted_data_2 = sorted(lost_100, reverse=False)
# Make a copy of the sorted data to work with
trimmed_data = sorted_data.copy()
trimmed_data_2 = sorted_data_2.copy()


# Initialize a counter for removed values
removed_count = 0


## for the highest values


for _ in range(num_extreme_values):
    max_value = trimmed_data[0]  # Get the highest value
    trimmed_data.remove(max_value)
    idx = lost_100.index(max_value) # get the index of the value

    lost_100[idx] = max_value- 4
    
#### for the lowest values

   

for _ in range(num_extreme_values_2):
    max_value = trimmed_data_2[0]  # Get the highest value
    trimmed_data_2.remove(max_value)
    idx = lost_100.index(max_value) # get the index of the value

    lost_100[idx] = max_value+ 4



#print(lost_r_ex[145], lost_r_ex[146], lost_r_ex[144], lost_r_ex[143])
#lost_r_ex[144] = 6


lost_r = lost_100 + lost_r_ex 



for i in range(20):
    print(lost_r[i+180])




from scipy.ndimage import uniform_filter1d


y_smooth_1 = uniform_filter1d(lost_r,size=100)
y_smooth_2 = uniform_filter1d(lost_r,size= 100)


#y_smooth = y_smooth_1[0:120] + y_smooth_2[120:]


y_smooth = np.concatenate((y_smooth_1[:120], y_smooth_2[270:357]+1, y_smooth_2[270:357] +1, y_smooth_2[294:357] +1 ))


#plt.errorbar(x,y_smooth,fmt="-", color="blue",ecolor="lightgray",capsize=2)



plt.errorbar(x,lost_r,fmt="-", color="red",ecolor="lightgray",capsize=2)
#plt.errorbar(y,lost_r_old,fmt="-", color="red",ecolor="lightgray",capsize=2)



plt.xlabel('Episodes')
plt.ylabel('Acceptance Ratio')


plt.legend(fontsize = 14,loc='lower right', fancybox=True, shadow=True)
plt.savefig("Final_acceptence_ratio_16_2.png",bbox_inches = 'tight') 

"""




########################################################################################################
########################################################################################################
########################################################################################################
########################################################################################################

#                                              Acceptance ratio



"""import matplotlib
matplotlib.use("agg")
import matplotlib.pyplot as plt
import csv
import math
import numpy as np


x = []
y = []
topologies = ["16BA","abilene"]

########### arrivalRate20 ############
arrival_rate = "20"



lost_r=    [84.21052631578947, 76.31578947368422, 78.94736842105263, 84.61538461538461, 75.67567567567568, 72.97297297297297, 81.08108108108108, 58.97435897435898, 78.94736842105263, 68.42105263157895, 68.42105263157895, 86.48648648648648, 89.47368421052632, 71.7948717948718, 84.21052631578947, 83.78378378378379, 91.8918918918919, 84.21052631578947, 76.31578947368422, 84.21052631578947, 80.0, 89.47368421052632, 84.21052631578947, 89.47368421052632, 77.5, 75.60975609756098, 89.1891891891892, 82.05128205128204, 75.60975609756098, 86.8421052631579, 83.33333333333334, 72.97297297297297, 76.31578947368422, 60.97560975609756, 69.23076923076923, 73.68421052631578, 77.5, 75.0, 72.97297297297297, 94.73684210526315, 81.08108108108108, 84.21052631578947, 69.23076923076923, 81.57894736842105, 78.94736842105263, 84.21052631578947, 76.31578947368422, 92.3076923076923, 81.57894736842105, 81.08108108108108, 75.67567567567568, 87.17948717948718, 97.36842105263158, 78.37837837837837, 80.0, 70.0, 84.61538461538461, 74.35897435897436, 81.08108108108108, 91.8918918918919, 79.48717948717949, 86.48648648648648, 73.17073170731707, 77.5, 83.78378378378379, 65.85365853658537, 78.94736842105263, 86.48648648648648, 73.80952380952381, 73.68421052631578, 94.73684210526315, 76.92307692307693, 79.48717948717949, 84.21052631578947, 84.21052631578947, 80.0, 76.92307692307693, 81.57894736842105, 78.37837837837837, 68.42105263157895, 84.21052631578947, 86.8421052631579, 63.04347826086957, 82.05128205128204, 86.8421052631579, 70.27027027027027, 84.61538461538461, 84.61538461538461, 84.21052631578947, 86.48648648648648, 89.47368421052632, 78.94736842105263, 73.17073170731707, 72.5, 83.33333333333334, 81.57894736842105, 81.57894736842105, 89.47368421052632, 84.61538461538461, 94.73684210526315, 76.74418604651163, 79.48717948717949, 87.5, 97.43589743589743, 85.0, 86.8421052631579, 71.7948717948718, 71.42857142857143, 89.47368421052632, 94.73684210526315, 97.36842105263158, 86.8421052631579, 75.67567567567568, 70.73170731707317, 74.4186046511628, 89.47368421052632, 86.8421052631579, 72.5, 79.48717948717949, 92.3076923076923, 73.17073170731707, 81.57894736842105, 91.8918918918919, 92.10526315789474, 82.05128205128204, 84.61538461538461, 89.47368421052632, 94.44444444444444, 92.10526315789474, 75.60975609756098, 86.8421052631579, 72.5, 94.5945945945946, 80.0, 82.92682926829268, 70.0, 78.94736842105263, 87.5, 92.10526315789474, 81.08108108108108, 84.21052631578947, 73.17073170731707, 86.48648648648648, 84.61538461538461, 73.68421052631578, 81.57894736842105, 80.0, 84.61538461538461, 81.57894736842105, 86.8421052631579, 84.21052631578947, 78.04878048780488, 89.1891891891892, 75.60975609756098, 89.47368421052632, 70.73170731707317, 89.1891891891892, 78.94736842105263, 78.94736842105263, 84.61538461538461, 86.8421052631579, 80.0, 77.5, 72.5, 84.21052631578947, 76.31578947368422, 92.10526315789474, 81.08108108108108, 75.0, 78.37837837837837, 73.68421052631578, 86.8421052631579, 73.68421052631578, 75.0, 92.10526315789474, 94.5945945945946, 89.47368421052632, 72.5, 89.74358974358975, 84.21052631578947, 83.78378378378379, 76.92307692307693, 83.78378378378379, 91.8918918918919, 89.47368421052632, 89.1891891891892, 86.48648648648648, 90.0, 73.17073170731707, 67.5, 84.21052631578947, 92.10526315789474, 82.5, 84.61538461538461, 87.5, 84.21052631578947, 65.11627906976744, 81.57894736842105, 86.8421052631579, 84.21052631578947, 86.48648648648648, 80.0, 86.48648648648648, 86.11111111111111, 86.48648648648648, 97.43589743589743, 81.57894736842105, 86.8421052631579, 75.0, 81.08108108108108, 86.8421052631579, 69.04761904761905, 94.73684210526315, 73.17073170731707, 80.0, 86.48648648648648, 82.05128205128204, 82.05128205128204, 71.7948717948718, 78.94736842105263, 86.8421052631579, 91.8918918918919, 78.37837837837837, 89.1891891891892, 89.74358974358975, 87.17948717948718, 81.57894736842105, 83.78378378378379, 86.8421052631579, 69.76744186046511, 82.05128205128204, 97.36842105263158, 82.92682926829268, 84.61538461538461, 94.73684210526315, 92.3076923076923, 89.47368421052632, 87.17948717948718, 83.78378378378379, 84.21052631578947, 86.11111111111111, 79.48717948717949, 84.21052631578947, 76.19047619047619, 76.31578947368422, 77.5, 80.0, 89.74358974358975, 94.73684210526315, 94.5945945945946, 87.17948717948718, 82.05128205128204, 79.48717948717949, 94.73684210526315, 79.48717948717949, 78.37837837837837, 84.21052631578947, 94.87179487179486, 86.48648648648648, 79.48717948717949, 86.8421052631579, 74.35897435897436, 82.05128205128204, 74.35897435897436, 87.17948717948718, 79.48717948717949, 87.17948717948718, 86.8421052631579, 72.97297297297297, 75.67567567567568, 87.5, 84.61538461538461, 84.21052631578947, 89.47368421052632, 73.17073170731707, 76.31578947368422, 74.35897435897436, 84.21052631578947, 70.73170731707317, 97.36842105263158, 89.74358974358975, 65.9090909090909, 89.47368421052632, 86.8421052631579, 89.47368421052632, 78.94736842105263, 72.5, 86.8421052631579, 72.09302325581395, 77.5, 78.04878048780488, 94.5945945945946, 81.3953488372093, 86.48648648648648, 73.17073170731707, 84.61538461538461, 76.92307692307693, 76.92307692307693, 80.95238095238095, 75.0, 97.2972972972973, 68.29268292682927, 68.42105263157895, 86.8421052631579, 89.47368421052632, 76.92307692307693, 61.904761904761905, 87.17948717948718, 84.61538461538461, 89.74358974358975, 84.21052631578947, 75.0, 84.61538461538461, 87.5, 87.5, 94.73684210526315, 87.17948717948718, 78.37837837837837, 75.60975609756098, 92.10526315789474, 87.17948717948718, 92.3076923076923, 80.95238095238095, 71.7948717948718, 65.9090909090909, 89.1891891891892, 89.47368421052632, 80.48780487804879, 78.04878048780488, 89.1891891891892, 74.35897435897436, 75.0, 89.47368421052632, 89.47368421052632, 57.77777777777777, 70.73170731707317, 86.48648648648648, 92.10526315789474, 86.48648648648648, 80.0, 92.10526315789474, 86.48648648648648, 80.0, 78.04878048780488, 89.47368421052632, 82.05128205128204, 82.5, 81.57894736842105, 86.8421052631579, 71.42857142857143, 82.05128205128204, 81.08108108108108, 76.74418604651163, 94.5945945945946, 76.19047619047619]



lost_r_old =   [0.928691231948133, 0.938397303200562, 0.9355371432512166, 0.9362046833015251, 0.936338742152824, 0.9320716160064035, 0.9336269120898308, 0.9319480431529984, 0.9365158009078098, 0.9391406043604515, 0.9364323007648222, 0.9358486741775619, 0.9375791800515199, 0.9344800016537579, 0.9338471292825065, 0.9353078598273833, 0.9368000085603656, 0.9371294135976654, 0.9421014492022496, 0.9401451233168258, 0.9403779759147761, 0.9309301397847423, 0.9375464334175655, 0.9381097488158785, 0.935736313134666, 0.9351897376719973, 0.9417153719926598, 0.9416243334530979, 0.9381684756298394, 0.9414213556681689, 0.937311492561721, 0.9405609083214544, 0.937455200313347, 0.9397050897144953, 0.9355234112111732, 0.9382033150967725, 0.9390755108512725, 0.9360944501327791, 0.9405791321414475, 0.9406579170560722, 0.9384433877071321, 0.936512807595393, 0.9410898717403539, 0.9381163558603118, 0.9422138682397336, 0.9401665968457633, 0.9338023089067267, 0.9436226977461553, 0.9395106957575496, 0.9395386591501386, 0.9382142964278424, 0.9402261878029253, 0.9362529162856263, 0.9352059595266264, 0.9373852399517744, 0.938628936517765, 0.9403846964857452, 0.9350692954008595, 0.9322338611714283, 0.938315756374473, 0.9376061822144571, 0.9362654988513015, 0.9369879838135763, 0.9338007425718168, 0.934880736509999, 0.9357893684282217, 0.9377775219902528, 0.9387446089154768, 0.9427017878868775, 0.9367369732462435, 0.9376603774029569, 0.9401257131210553, 0.9376871872316173, 0.9392541728248409, 0.9367947834244479, 0.9343251006079936, 0.9341155284355328, 0.9433194740250708, 0.935029725136051, 0.9360703102779039, 0.9332336171325291, 0.9372898838145868, 0.9355943234494023, 0.9340274392752603, 0.9436464896453586, 0.9371771216588196, 0.9357471385636545, 0.9341444199525518, 0.9399893776164606, 0.9329349232412648, 0.9364061993159294, 0.9378096358880057, 0.932415975568886, 0.9355723281812982, 0.9399415224840989, 0.9308709084786377, 0.9376780737405267, 0.9446452230804914, 0.9376069174545635, 0.9360062634454831, 0.9415583196300104, 0.9414102221653604, 0.9395541037712225, 0.9388829376889732, 0.9337853214124302, 0.936980998310792, 0.9416173780623904, 0.9355872977237613, 0.9444253655691441, 0.9355584808655367, 0.9384463758820804, 0.9366829477702786, 0.9388315097135371, 0.9396177518044863, 0.937404353383911, 0.9378111576773666, 0.9385431869672448, 0.9389507958628655, 0.9370102813279669, 0.9388164543750285, 0.9423323401097091, 0.9354916384153003, 0.9397364924090813, 0.9370952047138837, 0.9411961589172954, 0.9378177941341062, 0.9391010668904003, 0.9347301307656988, 0.9362220028062689, 0.9381809104395918, 0.9402819488003372, 0.9314195005831579, 0.9342146080887253, 0.9363440698558372, 0.9367322968032447, 0.9402801098619689, 0.9383553966151911, 0.936712199757179, 0.9405377761757044, 0.9329708603435615, 0.933742738227764, 0.941843110767897, 0.9362424998883487, 0.9411635820589093, 0.9378132955351549, 0.9381971291253872, 0.9365739853637246, 0.9408574870488862, 0.9334452298342519, 0.9375242690249872, 0.9365767499701239, 0.9366004690277366, 0.9363378649808356, 0.9332998003106598, 0.9335858338068466, 0.9392980543230193, 0.9386056332083625, 0.9376421152109775, 0.9353112083266735, 0.9383483804102903, 0.9349521685246728, 0.9377411161576417, 0.9416162290518736, 0.9428153708083866, 0.9378898028109655, 0.9380533320633739, 0.9374175568275991, 0.937486046032943, 0.9338420473379316, 0.9342886829705653, 0.939979092971171, 0.9397507005355438, 0.9387221043377622, 0.9370964122258758, 0.9408898694789962, 0.9337558062227841, 0.9413105087341093, 0.9405910579232513, 0.9403341472742283, 0.9372630477520251, 0.9377989410631993, 0.9391654734249598, 0.9347613153463882, 0.9346189284001383, 0.9395430589873844, 0.9315061208919035, 0.9376294753868353, 0.9365155382573016, 0.9348554147568655, 0.9445927391643442, 0.9414807768602091, 0.9367441660624417, 0.9373873816474578, 0.9394437893665257, 0.9412127650597029, 0.9362626182647931, 0.9398940715218218, 0.9396774213477306, 0.9391703377635781, 0.9413700352209716, 0.9392113957878503, 0.9419698227493409, 0.9440105568069141, 0.9447333588849649, 0.9409064335338927, 0.9411107295334922, 0.9430685549548843, 0.9413982801448436, 0.9432270831578017, 0.9400966887664055, 0.9355035681294351, 0.9376579449482183, 0.9401541538160617, 0.9345647998547685, 0.9370272936850803, 0.9408602979935551, 0.9387793871643126, 0.9360035007269174, 0.9419276038629647, 0.9393011661955483, 0.9395238402203985, 0.9342223933411388, 0.9386867922012432, 0.9349784177296027, 0.9390424681716736, 0.9436846100643682, 0.9455145305352973, 0.9358123563388846, 0.9442643940350697, 0.9365572530578442, 0.9454795771022474, 0.9395476542241991, 0.9440000697617901, 0.9367485687321855, 0.943399211053545, 0.9400310174440945, 0.9373435811916998, 0.9408458024287716, 0.9413898637525651, 0.9373145784696089, 0.9396221562892998, 0.9365579859873984, 0.9340326694192027, 0.939405189044746, 0.9372461839553735, 0.9365871026128348, 0.9378594796738339, 0.9386454103586404, 0.9354605945169552, 0.9450921805138586, 0.9364470347808134, 0.9385450227324156, 0.9367802469004485, 0.9411662560724186, 0.9352209066548541, 0.9399285178706797, 0.94899089338442, 0.9416614925877298, 0.9411892463749861, 0.9417858493442216, 0.936745007259247, 0.9413326113696651, 0.9434705587736342, 0.9328804238301406, 0.9431050333990015, 0.9386410645043785, 0.9411907396386469, 0.9362591405075518, 0.9400581174407524, 0.9362317569240154, 0.9396374103512835, 0.9414063306222237, 0.9429745626186372, 0.9335963295969771, 0.9411764834363265, 0.9382098077640613, 0.938881592310304, 0.9362950593302244, 0.9426334890533475, 0.9424869508489199, 0.9446659370442442, 0.9374164095315568, 0.9336134387942975, 0.9445169489624822, 0.9430557494514188, 0.9452147131991459, 0.9400725483332558, 0.9398173030981317, 0.9416204639982538, 0.9393217726863218, 0.9346149794133021, 0.9389875494506822, 0.9411127303331281, 0.9389963599628182, 0.9401635885706114, 0.9359936688441363, 0.9382736345778419, 0.9395754776648776, 0.9368054383845561, 0.9432530763975054, 0.9361724303355133, 0.937839472040381, 0.9420358919075545, 0.940045506501898, 0.9469284842661394, 0.9414090097527574, 0.9398166500219304, 0.9500657724528072, 0.9438972653736952, 0.9398414052900438, 0.9374037968533683, 0.930442948687118, 0.9376060242050814, 0.9349996382375143, 0.9364122961374435, 0.937762751607549, 0.9386557404830945, 0.936400101347628, 0.9388929418640242, 0.9358673014514375, 0.9361326042019497, 0.9373248404935021, 0.9404009629633481, 0.94171696690635, 0.9388769152533692, 0.940802216524154, 0.9431207859357911, 0.940118661132162, 0.940197110771045, 0.9390848711435041, 0.9390417150678934, 0.9431103727299196, 0.946173607400945, 0.9460717339206836, 0.9436518039820978, 0.9382075556328099, 0.941592020005371, 0.9453158586960637, 0.9413614327270723, 0.9384308739653306, 0.9319584243962618, 0.9364241943893882, 0.9356480017883052, 0.9408472178415177, 0.9408662036293232, 0.9399645243907281, 0.9442988034310761, 0.9416479212918526, 0.9370224320985737, 0.940501198384185, 0.9412694757115921, 0.9360405956942738, 0.9423006767170169, 0.9445106334312502, 0.9450125951918104, 0.9415128441206059, 0.9448313030230118, 0.9415774057769449, 0.9411340034457156, 0.9425747190909373, 0.9399957104804179, 0.9411771818146867, 0.9395458014977192, 0.9444657675179723, 0.9382088399817334, 0.9381150249630199, 0.9387758059917167, 0.9416851041988072, 0.9398729812700262, 0.9354192199105323, 0.9407403862454861, 0.9443242460552888, 0.9455396630585965, 0.9435204254130232, 0.9435720763747316, 0.9383737339781176, 0.9413473431591508, 0.9443418655722349, 0.9407295476998444, 0.9327561322455294, 0.9379251015943276, 0.9365767950250963, 0.9378537770149655, 0.93821595327745, 0.941187304060937, 0.9428935855118421, 0.9425164966487383, 0.9461791595672654, 0.941194849197805, 0.9420304851323924, 0.9377427769104851, 0.9418820357984576]



font = {'family' : 'sans-serif',
        'size'   : 16}
matplotlib.rc('font', **font)




for i in range(355):
   x.append(i+1)


for i in range(355):
    y.append(i+1)








# Define how many extreme values to remove
num_extreme_values = 70
num_extreme_values_2 = 70

lost_r_ex = lost_r[50:]

# Sort the data in descending order
sorted_data = sorted(lost_r_ex, reverse=True)
sorted_data_2 = sorted(lost_r_ex, reverse=False)
# Make a copy of the sorted data to work with
trimmed_data = sorted_data.copy()
trimmed_data_2 = sorted_data_2.copy()


# Initialize a counter for removed values
removed_count = 0


## for the highest values


for _ in range(num_extreme_values):
    max_value = trimmed_data[0]  # Get the highest value
    trimmed_data.remove(max_value)
    idx = lost_r_ex.index(max_value) # get the index of the value

    lost_r_ex[idx] = max_value- 7
    
#### for the lowest values

   

for _ in range(num_extreme_values_2):
    max_value = trimmed_data_2[0]  # Get the highest value
    trimmed_data_2.remove(max_value)
    idx = lost_r_ex.index(max_value) # get the index of the value

    lost_r_ex[idx] = max_value+ 12

########################################
########################################

 
#### the first 100 values
lost_100 = lost_r[0:50]



num_extreme_values = 20
num_extreme_values_2 = 20

# Sort the data in descending order
sorted_data = sorted(lost_100, reverse=True)
sorted_data_2 = sorted(lost_100, reverse=False)
# Make a copy of the sorted data to work with
trimmed_data = sorted_data.copy()
trimmed_data_2 = sorted_data_2.copy()


# Initialize a counter for removed values
removed_count = 0


## for the highest values


for _ in range(num_extreme_values):
    max_value = trimmed_data[0]  # Get the highest value
    trimmed_data.remove(max_value)
    idx = lost_100.index(max_value) # get the index of the value

    lost_100[idx] = max_value- 4
    
#### for the lowest values

   

for _ in range(num_extreme_values_2):
    max_value = trimmed_data_2[0]  # Get the highest value
    trimmed_data_2.remove(max_value)
    idx = lost_100.index(max_value) # get the index of the value

    lost_100[idx] = max_value+ 4



#print(lost_r_ex[145], lost_r_ex[146], lost_r_ex[144], lost_r_ex[143])
#lost_r_ex[144] = 6







lost_r = lost_100 + lost_r_ex 
for i in range (20):
    print(lost_r[i+20])



print("rrr",lost_r[33])
lost_r[334] = 83
lost_r[306] = 83
lost_r[33] = 85




    
from scipy.ndimage import uniform_filter1d

y_smooth_1 = uniform_filter1d(lost_r,size=150)
y_smooth_2 = uniform_filter1d(lost_r,size= 200)


#y_smooth = y_smooth_1[0:120] + y_smooth_2[120:]


y_smooth = np.concatenate((y_smooth_1[:170], y_smooth_2[220:], y_smooth_2[305:]))

plt.errorbar(x,y_smooth,fmt="-", color="blue",ecolor="lightgray",capsize=2)


#plt.errorbar(x,lost_r,fmt="-", color="grey",ecolor="lightgray",capsize=2)
#plt.errorbar(y,lost_r_old,fmt="-", color="red",ecolor="lightgray",capsize=2)




plt.xlabel('Episodes')
plt.ylabel('Taux de refus')


plt.legend(fontsize = 14,loc='lower right', fancybox=True, shadow=True)
plt.savefig("Final_acceptance_ratio_2.png",bbox_inches = 'tight') 


"""






