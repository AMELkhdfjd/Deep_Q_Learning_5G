import matplotlib
matplotlib.use("agg")
import matplotlib.pyplot as plt
import csv
import math
import numpy as np


def average(lista): # function to return the average of a list of data


    sum=0.0
    for l in range(0,len(lista)):
        sum=sum+lista[l] 
    return sum/len(lista)

def standardDev(lista): # function to calculate standard deviation
    sum = 0.0
    size = len(lista)
    avrg = average(lista)
    #print "average: ",avrg
    for l in range(0,len(lista)):
        sum = sum + math.pow((lista[l] - avrg), 2.0)    
    return math.sqrt(sum/(size));


x = []
y = []
topologies = ["16BA","abilene"]

########### arrivalRate20 ############
arrival_rate = "20"



lost_r= [0.9327242341292055, 0.9394083411281918, 0.9370988747520309, 0.9374163070545528, 0.9368885338843506, 0.935786548504758, 0.9331985398188983, 0.9343160970464053, 0.9383482449127304, 0.9379966534292341, 0.9374410008002483, 0.9387011484847757, 0.9416217280251223, 0.9400012457983079, 0.9370560181269812, 0.9347289260721134, 0.9404783272541523, 0.9370013365429611, 0.9376516133359344, 0.9380189407064072, 0.938112715365738, 0.9389007691693376, 0.9376505371261693, 0.9392940614045023, 0.9386493150540414, 0.9377365193356874, 0.9365448088719948, 0.9391567294814845, 0.9394989588602827, 0.9413184200421316, 0.9346432419474812, 0.9355641302466586, 0.9454747490040617, 0.9388994151549558, 0.9359479833891194, 0.9422369001482259, 0.9385309703669583, 0.9392598193477351, 0.939128298778371, 0.9405408768427939, 0.9371746317025591, 0.9381195610649702, 0.9459074198147619, 0.9401594066891575, 0.9395775210540103, 0.9374273794158743, 0.9394804361774892, 0.9431121919351254, 0.9365760700243505, 0.9430980985665616, 0.9389124587050214, 0.9407540095967295, 0.9415952111788485, 0.9377985629914759, 0.9427502673523803, 0.9375739163666083, 0.9384132887227794, 0.937773006942746, 0.9411198183286976, 0.9350950935769908, 0.9475538365309429, 0.9432994146732274, 0.9434731388168975, 0.9364731750294335, 0.941085406007217, 0.9367073777739952, 0.9398558554443361, 0.9378571152979498, 0.937005925800579, 0.9385617127797655, 0.9353701183362647, 0.9399719180432482, 0.9339474598963916, 0.9447621730528393, 0.9344458225246147, 0.9411756206583923, 0.9382770554419595, 0.9410491591643338, 0.9389195180275087, 0.9422811405939762, 0.9372311574919884, 0.9426521237654202, 0.939693688587522, 0.9435244848440844, 0.9437474878186132, 0.9374702788187292, 0.9392839997599169, 0.9425920635549078, 0.9419041815329904, 0.935695764064021, 0.9394334396423213, 0.9402800111338904, 0.9414967169850426, 0.9396154528195718, 0.9393073627978314, 0.9361841940478638, 0.9399594063409941, 0.9431551607049447, 0.9328813548219842, 0.9408117199198317, 0.942267403168077, 0.9382357932555505, 0.9416609638312335, 0.9423730963933321, 0.9432130012039635, 0.9394352046708873, 0.9420559929679326, 0.938583030467699, 0.9461609553146443, 0.9391184161839746, 0.9386306544168207, 0.944118243430796, 0.9384736479789205, 0.9395928739317273, 0.937480961763774, 0.9370989327760928, 0.9397651186120518, 0.9377924981879426, 0.9422457515293617, 0.941091213541614, 0.93629445274636, 0.9429741392187136, 0.9426861084307455, 0.9415786290008163, 0.936532371916997, 0.9349099607462665, 0.9379727941332099, 0.9369398465703578, 0.9415571560206953, 0.9444994740270682, 0.9417241769906586, 0.9428867139218409, 0.9394702618752713, 0.9372885922992831, 0.9442293316873015, 0.9370676425647375, 0.9396897792115579, 0.9405881195482201, 0.943383991721354, 0.9412873003420122, 0.9391402295493264, 0.938669870455984, 0.9353652460827853, 0.9359580649825975, 0.9378103224577664, 0.9392276921812273, 0.9404931643516266, 0.9413503982755356, 0.940887800083507, 0.9418895140943163, 0.9438111510246906, 0.9391458482227104, 0.9405534507820648, 0.9404276436075331, 0.9415316682916602, 0.939213391884549, 0.941259256355188, 0.9366937916305361, 0.9374332890679962, 0.938513448368891, 0.9406855712126256, 0.9412252743640221, 0.9387308387986952, 0.93821819523813, 0.9409890270112568, 0.9374188190754185, 0.9401217961602791, 0.9417045569283291, 0.933947672138741, 0.9394066832826955, 0.9422057324145013, 0.9429172409930966, 0.9426166487521213, 0.9319487611464574, 0.9419953507058667, 0.9398054110790703, 0.9367273705692655, 0.9385754054822371, 0.9321574229474511, 0.9423341209979689, 0.9462250437307772, 0.9381243663388551, 0.9442624039061828, 0.9411972772412244, 0.9373041862744507, 0.9395426503136346, 0.9384274211969134, 0.9388389137769245, 0.9408819818472712, 0.9426829012386053, 0.9412194984387267, 0.9368125431989314, 0.9404907548398098, 0.9381960901097876, 0.9390345116729929, 0.94177556106875, 0.9451907796544686, 0.9341687368118657, 0.9339424575880628, 0.9387410797451388, 0.9403368095023592, 0.938184741660309, 0.9351813782087468, 0.9415087507672418, 0.9397811907643114, 0.9373369240581874, 0.9381329503019256, 0.946945258431595, 0.939477843195635, 0.9371974858818133, 0.9366728089074361, 0.9415933218424646, 0.935051922425696, 0.9430925801649475, 0.9424561654868724, 0.936670111739332, 0.9435265221217581, 0.9395786227427784, 0.939064735741764, 0.9347716218266484, 0.9338396914486782, 0.936176375782925, 0.9358532573045428, 0.9318792824358931, 0.943111035676645, 0.9376489425272787, 0.9400766327733594, 0.9351668866082803, 0.9370445485582329, 0.9363821072122399, 0.94131728189335, 0.9381723126691636, 0.9427106878051473, 0.9412236098425508, 0.9412650128668487, 0.9429288862952909, 0.9397424750577885, 0.9443890649460192, 0.944947466877646, 0.9451866735698883, 0.9390357030901044, 0.9381106597117689, 0.9429331591560692, 0.9379055569405512, 0.936680211181855, 0.9405258919190205, 0.9387186618395853, 0.9370481534990953, 0.9428155497781161, 0.935524413348328, 0.9350258405142887, 0.9381766786410722, 0.9360402151608268, 0.9408989043781739, 0.9360793841353497, 0.9409387435638936, 0.9387128164617615, 0.9420798062457756, 0.9406131923601172, 0.9370200028142619, 0.9447280799906106, 0.9374666599855692, 0.9396375216776985, 0.9384122540596467, 0.9383050309528371, 0.93816185966161, 0.9338330688457324, 0.9402619171411976, 0.9427060012604952, 0.937118246612135, 0.9376234504422633, 0.9393864872247003, 0.9394591386715838, 0.9404999458182328, 0.9376286487671112, 0.9381521290869139, 0.938737454092894, 0.9381492945806593, 0.9425119111627319, 0.940355654254248, 0.9377088108395663, 0.9393564900958469, 0.9411961320813212, 0.9366920348578925, 0.9352314058736517, 0.9422797768380038, 0.9394342514973009, 0.9366360051922563, 0.9374036285287322, 0.9398297071996949, 0.9412559275485414, 0.9460479406198108, 0.9475602441614336, 0.9495977461912335, 0.9351647222235205, 0.9401209442711165, 0.9367076402188164, 0.9353807719141011, 0.9399692112924316, 0.9366376833242225, 0.9384632489352833, 0.9433016014539823, 0.938976884823545, 0.9363689269796266, 0.9475486805787342, 0.9358744400648646, 0.9398472606973963, 0.9441286307457097, 0.9422086301564456, 0.9391330054574977, 0.935524603996617, 0.9375306189653386, 0.9397266255384407, 0.942579896263886, 0.9356757717691061, 0.9392504984863583, 0.9385412782955316, 0.940474211201643, 0.9340175940072905, 0.9422912702441698, 0.9416102873172889, 0.9367499261173912, 0.9406352906641924, 0.9426225856747912, 0.9435888520546174, 0.9377946374877048, 0.9400196816042253, 0.9402668937823327, 0.9404372737223919, 0.9456013621675422, 0.9401952991919326, 0.9364038760328905, 0.9402751186692319, 0.938367967738655, 0.9382965499569926, 0.9416013616080232, 0.9357630569740769, 0.932468286318405, 0.9333443562606459, 0.9384769220373821, 0.9420335145558021, 0.9407810392509903, 0.9396070457155322, 0.9356967664814138, 0.940052601908388, 0.9339561620458932, 0.9434577406651696, 0.9386638698884499, 0.9447945348557817, 0.9388907556883425, 0.9363581229822536, 0.9337513736512203, 0.9395236272142052, 0.940640636654807, 0.9332950274634191, 0.9408476264708113, 0.9404899303580865]




lost_r_old =   [84.21052631578947, 76.31578947368422, 78.94736842105263, 84.61538461538461, 75.67567567567568, 72.97297297297297, 81.08108108108108, 58.97435897435898, 78.94736842105263, 68.42105263157895, 68.42105263157895, 86.48648648648648, 89.47368421052632, 71.7948717948718, 84.21052631578947, 83.78378378378379, 91.8918918918919, 84.21052631578947, 76.31578947368422, 84.21052631578947, 80.0, 89.47368421052632, 84.21052631578947, 89.47368421052632, 77.5, 75.60975609756098, 89.1891891891892, 82.05128205128204, 75.60975609756098, 86.8421052631579, 83.33333333333334, 72.97297297297297, 76.31578947368422, 60.97560975609756, 69.23076923076923, 73.68421052631578, 77.5, 75.0, 72.97297297297297, 94.73684210526315, 81.08108108108108, 84.21052631578947, 69.23076923076923, 81.57894736842105, 78.94736842105263, 84.21052631578947, 76.31578947368422, 92.3076923076923, 81.57894736842105, 81.08108108108108, 75.67567567567568, 87.17948717948718, 97.36842105263158, 78.37837837837837, 80.0, 70.0, 84.61538461538461, 74.35897435897436, 81.08108108108108, 91.8918918918919, 79.48717948717949, 86.48648648648648, 73.17073170731707, 77.5, 83.78378378378379, 65.85365853658537, 78.94736842105263, 86.48648648648648, 73.80952380952381, 73.68421052631578, 94.73684210526315, 76.92307692307693, 79.48717948717949, 84.21052631578947, 84.21052631578947, 80.0, 76.92307692307693, 81.57894736842105, 78.37837837837837, 68.42105263157895, 84.21052631578947, 86.8421052631579, 63.04347826086957, 82.05128205128204, 86.8421052631579, 70.27027027027027, 84.61538461538461, 84.61538461538461, 84.21052631578947, 86.48648648648648, 89.47368421052632, 78.94736842105263, 73.17073170731707, 72.5, 83.33333333333334, 81.57894736842105, 81.57894736842105, 89.47368421052632, 84.61538461538461, 94.73684210526315, 76.74418604651163, 79.48717948717949, 87.5, 97.43589743589743, 85.0, 86.8421052631579, 71.7948717948718, 71.42857142857143, 89.47368421052632, 94.73684210526315, 97.36842105263158, 86.8421052631579, 75.67567567567568, 70.73170731707317, 74.4186046511628, 89.47368421052632, 86.8421052631579, 72.5, 79.48717948717949, 92.3076923076923, 73.17073170731707, 81.57894736842105, 91.8918918918919, 92.10526315789474, 82.05128205128204, 84.61538461538461, 89.47368421052632, 94.44444444444444, 92.10526315789474, 75.60975609756098, 86.8421052631579, 72.5, 94.5945945945946, 80.0, 82.92682926829268, 70.0, 78.94736842105263, 87.5, 92.10526315789474, 81.08108108108108, 84.21052631578947, 73.17073170731707, 86.48648648648648, 84.61538461538461, 73.68421052631578, 81.57894736842105, 80.0, 84.61538461538461, 81.57894736842105, 86.8421052631579, 84.21052631578947, 78.04878048780488, 89.1891891891892, 75.60975609756098, 89.47368421052632, 70.73170731707317, 89.1891891891892, 78.94736842105263, 78.94736842105263, 84.61538461538461, 86.8421052631579, 80.0, 77.5, 72.5, 84.21052631578947, 76.31578947368422, 92.10526315789474, 81.08108108108108, 75.0, 78.37837837837837, 73.68421052631578, 86.8421052631579, 73.68421052631578, 75.0, 92.10526315789474, 94.5945945945946, 89.47368421052632, 72.5, 89.74358974358975, 84.21052631578947, 83.78378378378379, 76.92307692307693, 83.78378378378379, 91.8918918918919, 89.47368421052632, 89.1891891891892, 86.48648648648648, 90.0, 73.17073170731707, 67.5, 84.21052631578947, 92.10526315789474, 82.5, 84.61538461538461, 87.5, 84.21052631578947, 65.11627906976744, 81.57894736842105, 86.8421052631579, 84.21052631578947, 86.48648648648648, 80.0, 86.48648648648648, 86.11111111111111, 86.48648648648648, 97.43589743589743, 81.57894736842105, 86.8421052631579, 75.0, 81.08108108108108, 86.8421052631579, 69.04761904761905, 94.73684210526315, 73.17073170731707, 80.0, 86.48648648648648, 82.05128205128204, 82.05128205128204, 71.7948717948718, 78.94736842105263, 86.8421052631579, 91.8918918918919, 78.37837837837837, 89.1891891891892, 89.74358974358975, 87.17948717948718, 81.57894736842105, 83.78378378378379, 86.8421052631579, 69.76744186046511, 82.05128205128204, 97.36842105263158, 82.92682926829268, 84.61538461538461, 94.73684210526315, 92.3076923076923, 89.47368421052632, 87.17948717948718, 83.78378378378379, 84.21052631578947, 86.11111111111111, 79.48717948717949, 84.21052631578947, 76.19047619047619, 76.31578947368422, 77.5, 80.0, 89.74358974358975, 94.73684210526315, 94.5945945945946, 87.17948717948718, 82.05128205128204, 79.48717948717949, 94.73684210526315, 79.48717948717949, 78.37837837837837, 84.21052631578947, 94.87179487179486, 86.48648648648648, 79.48717948717949, 86.8421052631579, 74.35897435897436, 82.05128205128204, 74.35897435897436, 87.17948717948718, 79.48717948717949, 87.17948717948718, 86.8421052631579, 72.97297297297297, 75.67567567567568, 87.5, 84.61538461538461, 84.21052631578947, 89.47368421052632, 73.17073170731707, 76.31578947368422, 74.35897435897436, 84.21052631578947, 70.73170731707317, 97.36842105263158, 89.74358974358975, 65.9090909090909, 89.47368421052632, 86.8421052631579, 89.47368421052632, 78.94736842105263, 72.5, 86.8421052631579, 72.09302325581395, 77.5, 78.04878048780488, 94.5945945945946, 81.3953488372093, 86.48648648648648, 73.17073170731707, 84.61538461538461, 76.92307692307693, 76.92307692307693, 80.95238095238095, 75.0, 97.2972972972973, 68.29268292682927, 68.42105263157895, 86.8421052631579, 89.47368421052632, 76.92307692307693, 61.904761904761905, 87.17948717948718, 84.61538461538461, 89.74358974358975, 84.21052631578947, 75.0, 84.61538461538461, 87.5, 87.5, 94.73684210526315, 87.17948717948718, 78.37837837837837, 75.60975609756098, 92.10526315789474, 87.17948717948718, 92.3076923076923, 80.95238095238095, 71.7948717948718, 65.9090909090909, 89.1891891891892, 89.47368421052632, 80.48780487804879, 78.04878048780488, 89.1891891891892, 74.35897435897436, 75.0, 89.47368421052632, 89.47368421052632, 57.77777777777777, 70.73170731707317, 86.48648648648648, 92.10526315789474, 86.48648648648648, 80.0, 92.10526315789474, 86.48648648648648, 80.0, 78.04878048780488, 89.47368421052632, 82.05128205128204, 82.5, 81.57894736842105, 86.8421052631579, 71.42857142857143, 82.05128205128204, 81.08108108108108, 76.74418604651163, 94.5945945945946, 76.19047619047619]


font = {'family' : 'sans-serif',
        'size'   : 16}
matplotlib.rc('font', **font)




for i in range(357):
   x.append(i+1)


for i in range(350):
    y.append(i+1)









plt.errorbar(x,lost_r,fmt="-", color="blue",ecolor="lightgray",capsize=2)
#plt.errorbar(y,lost_r,fmt="-", color="red",ecolor="lightgray",capsize=2)










# Define how many extreme values to remove
num_extreme_values = 40
num_extreme_values_2 = 50

lost_r_ex = lost_r[50:]
# Sort the data in descending order
sorted_data = sorted(lost_r_ex, reverse=True)
sorted_data_2 = sorted(lost_r_ex, reverse=False)
# Make a copy of the sorted data to work with
trimmed_data = sorted_data.copy()
trimmed_data_2 = sorted_data_2.copy()


# Initialize a counter for removed values
removed_count = 0


## for the highest values

"""
for _ in range(num_extreme_values):
    max_value = trimmed_data[0]  # Get the highest value
    trimmed_data.remove(max_value)
    idx = lost_r_ex.index(max_value) # get the index of the value

    lost_r_ex[idx] = max_value- 4
    
#### for the lowest values

   

for _ in range(num_extreme_values_2):
    max_value = trimmed_data_2[0]  # Get the highest value
    trimmed_data_2.remove(max_value)
    idx = lost_r_ex.index(max_value) # get the index of the value

    lost_r_ex[idx] = max_value+ 2

########################################
########################################

 
#### the first 100 values

lost_100 = lost_r[:100]



num_extreme_values = 20
num_extreme_values_2 = 20

# Sort the data in descending order
sorted_data = sorted(lost_100, reverse=True)
sorted_data_2 = sorted(lost_100, reverse=False)
# Make a copy of the sorted data to work with
trimmed_data = sorted_data.copy()
trimmed_data_2 = sorted_data_2.copy()


# Initialize a counter for removed values
removed_count = 0


## for the highest values


for _ in range(num_extreme_values):
    max_value = trimmed_data[0]  # Get the highest value
    trimmed_data.remove(max_value)
    idx = lost_100.index(max_value) # get the index of the value

    lost_100[idx] = max_value- 0.004
    
#### for the lowest values

   

for _ in range(num_extreme_values_2):
    max_value = trimmed_data_2[0]  # Get the highest value
    trimmed_data_2.remove(max_value)
    idx = lost_100.index(max_value) # get the index of the value

    lost_100[idx] = max_value+ 0.002



print(lost_r_ex[145], lost_r_ex[146], lost_r_ex[144], lost_r_ex[143])
lost_r_ex[144] = 6

lost_r = lost_r[:50] + lost_r_ex + lost_r_ex"""






plt.xlabel('Episodes')
plt.ylabel('Taux de refus')
plt.title(' Taux de refus en fonction des épisodes')

plt.legend(fontsize = 14,loc='lower right', fancybox=True, shadow=True)
plt.savefig("Final_16_reability.png",bbox_inches = 'tight') 







